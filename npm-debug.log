0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.5.1
3 info using node@v0.12.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/mauricio/Development/coders-clan/statsd-newrelic-backend',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/mauricio/.npm/statsd-newrelic-backend/1.2.1/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/mauricio/.npm/statsd-newrelic-backend/1.2.1/package.tgz',
9 verbose tar pack   '/Users/mauricio/Development/coders-clan/statsd-newrelic-backend' ]
10 verbose tarball /Users/mauricio/.npm/statsd-newrelic-backend/1.2.1/package.tgz
11 verbose folder /Users/mauricio/Development/coders-clan/statsd-newrelic-backend
12 info prepublish statsd-newrelic-backend@1.2.1
13 verbose addLocalTarball adding from inside cache /Users/mauricio/.npm/statsd-newrelic-backend/1.2.1/package.tgz
14 silly cache afterAdd statsd-newrelic-backend@1.2.1
15 verbose afterAdd /Users/mauricio/.npm/statsd-newrelic-backend/1.2.1/package/package.json not in flight; writing
16 verbose afterAdd /Users/mauricio/.npm/statsd-newrelic-backend/1.2.1/package/package.json written
17 silly publish { name: 'statsd-newrelic-backend',
17 silly publish   version: '1.2.1',
17 silly publish   description: 'A backend implementation for StatsD which flushed the metrics data to a configured New Relic account',
17 silly publish   main: 'lib/index.js',
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'https://github.com/mpayetta/statsd-newrelic-backend.git' },
17 silly publish   keywords: [ 'statsd', 'newrelic', 'backend' ],
17 silly publish   author: { name: 'mpayetta' },
17 silly publish   license: 'MIT',
17 silly publish   bugs: { url: 'https://github.com/mpayetta/statsd-newrelic-backend/issues' },
17 silly publish   homepage: 'https://github.com/mpayetta/statsd-newrelic-backend',
17 silly publish   scripts: { lint: 'gulp lint', test: 'gulp mocha' },
17 silly publish   dependencies: { lodash: '^3.10.1', newrelic: '^1.21.2' },
17 silly publish   devDependencies:
17 silly publish    { chai: '~3.2.0',
17 silly publish      gulp: '^3.9.0',
17 silly publish      'gulp-jslint': '^0.2.2',
17 silly publish      'gulp-mocha': '^2.1.3',
17 silly publish      mocha: '*',
17 silly publish      sinon: '^1.15.4' },
17 silly publish   readme: '# StatsD backend for New Relic\n\n## Overview\nThis is a pluggable backend for [StatsD](https://github.com/etsy/statsd), which publishes stats to [New Relic](https://www.newrelic.com).\n\n## How it works\nThis backend uses the [New Relic agent](https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/new-relic-nodejs) \nlibrary to send metrics data directly to a configured New Relic app.\n\n## Installation\n\nFirst you need to get the backend plugin by simply doing:\n\n    $ npm install statsd-newrelic-backend\n        \nThen, point your StatsD server to the New Relic backend index.js file by adding it to the backends array in your StatsD config.js.\n\nFinally add your app name and license key to the config.js file (or follow any of the configuration options described [here](#configsection)).\n\nIn the end your config.js file will look like this:\n\n<a name="installation-config"></a> **Example configuration**\n    \n    {\n    \t...\n    \tbackends: [\'statsd-newrelic-backend\'],\n    \tnewRelicLicense: \'YOUR_LICENSE_KEY_HERE\',\n        newRelicApp: \'YOUR_APP_NAME_HERE\'\n    \t...\n    }    \n\nRestart your StatsD server and metrics will start to flow to your New Relic app.\n\n## <a name="configsection"></a> Configuration\n\n### New Relic Agent Configuration\nAccording the the node.js [agent configuration docs](https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/configuring-nodejs)\nThere are several ways to configure the agent. This backend supports all of them and are listed below:\n\n#### StatsD config.js file\nThe easiest option is to add two new configuration properties to the StatsD config file: `newRelicLicense` and `newRelicApp`\nas stated in the example config in the [Installation](#installation-config) section.\nThis method will set the [Environment Variables](#env-var) right before the New Relic agent is initialized.\n\n#### Server side configuration\nThis configuration is the first one in the hierarchy and overrides all other settings unless disabled. You can configure\nyour app on the server side directly from your New Relic account. For more info look [here](https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/configuring-nodejs#ui_settings)\n\n#### <a name="env-var"></a> Environment variables\nYou can set different environment variables in your server to configure the New Relic agent. For more information look [here](https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/configuring-nodejs-environment-variables)\n\n#### newrelic.js configuration file\nIn the root of this project there\'s a `newrelic-config.js` file which is an example configuration file. You just need to copy it:\n\n    $ cp newrelic-config.js newrelic.js\n    \n**IMPORTANT**: the new file name **MUST** be `newrelic.js`, otherwise the agent will not find it\n\nAnd edit the app_name and license_key with you app and license key data:\n\n    {\n        app_name: [\'Your new relic app name here\'],\n        license_key: \'Your new relic license key here\',\n    }\n\n### StatsD Backend Configuration\nThere are a few configuration options for the backend. They must all be provided in the StatsD config.js file.\n\n#### dispatchMetrics\nDefault: `[\'gauges\', \'counters\']`\nYou can configure which StatsD metrics should be sent to New Relic, by default only gauges and counters will be sent.\n   \nUsage:\n\n\n    {\n        ...\n        dispatchMetrics: [\'gauges\', \'counters\', ...]\n        ...\n    }\n    \n#### dispatchers\nDefault: `[\'customEvent\']`\nDispatchers are functions which send metrics to new relic using different APIs. There are 2 dispatchers available:\n\n- customMetric: will send metrics to new relic as [custom metrics](https://docs.newrelic.com/docs/apm/other-features/metrics/custom-metrics)\n- customEvent: will send metrics to new relic as [insights custom events](https://docs.newrelic.com/docs/insights/new-relic-insights/understanding-insights/new-relic-insights)\n   \nUsage:\n\n\n    {\n        ...\n        dispatchers: [\'customEvent\', \'customMetric\']\n        ...\n    }\n    \n#### globalMetricPrefix\nDefault: `null`\n\nThe `globalMetricPrefix` option allows you to set a global prefix for all StatsD metrics. The prefix will be appended\nto the Custom metric name sent to New Relic, so that it will look like this: `Custom/GlobalPrefix/statsd.metric.key`\n\nThis metric will **override** any custom prefixes configured in the `customMetricPrefix` option.\n\n#### customMetricPrefix\nDefault:\n    \n    {\n        gauges: \'Gauges\',\n        timers: \'Timers\',\n        counters: \'Counters\',\n        sets: \'Sets\'   \n    }\n\nYou can configure the New Relic custom metric names. By default all metric names will be `Custom/metric.key`\nEvery type of StatsD metric must be a key in the `customMetricPrefix` object:\n\nUsage:\n\n    {\n        customMetricPrefix: {\n            ... \n            gauges: \'Gauges\',\n            timers: \'SomeNameForTimers\'\n            ...\n        }\n    }\n   \nThe example above will send the gauges metrics as `Custom/Gauges/metric.key` and the timers as `Custom/SomeNameForTimers/metric.key`\nwhere `metric.key` is the StatsD metric key.\n\n## Tests\nTests can be run with gulp using the mocha task:\n\n`gulp mocha`\n\n## Dependencies\n- [newrelic](https://www.npmjs.com/package/newrelic)\n- [lodash](https://www.npmjs.com/package/lodash)\n\n\n## License\nSee the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).\n\n\n\nThis plugin was developed with the help of the guys from [Takipi](https://www.takipi.com)',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'ebc4d5c4b9620e18538fade68e12b337807903f7',
17 silly publish   _id: 'statsd-newrelic-backend@1.2.1',
17 silly publish   _shasum: '4a2384607b2413322ffae10deb1b41e53ae15958',
17 silly publish   _from: '.' }
18 silly mapToRegistry name statsd-newrelic-backend
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/statsd-newrelic-backend
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/mauricio/.npm/statsd-newrelic-backend/1.2.1/package.tgz
24 verbose request uri https://registry.npmjs.org/statsd-newrelic-backend
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 1:10:48 PM
27 verbose request using bearer token for auth
28 verbose request id c81c2ca78425e3d6
29 http request PUT https://registry.npmjs.org/statsd-newrelic-backend
30 http 403 https://registry.npmjs.org/statsd-newrelic-backend
31 verbose headers { 'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=60',
31 verbose headers   'content-length': '95',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   date: 'Tue, 18 Aug 2015 05:10:50 GMT',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   connection: 'keep-alive',
31 verbose headers   'x-served-by': 'cache-hkg6824-HKG',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1439874649.174983,VS0,VE862' }
32 verbose request invalidating /Users/mauricio/.npm/registry.npmjs.org/statsd-newrelic-backend on PUT
33 error publish Failed PUT 403
34 verbose stack Error: "You cannot publish over the previously published version 1.2.1." : statsd-newrelic-backend
34 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:254:14)
34 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:178:14)
34 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:344:22)
34 verbose stack     at Request.emit (events.js:110:17)
34 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1239:14)
34 verbose stack     at Request.emit (events.js:129:20)
34 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1187:12)
34 verbose stack     at IncomingMessage.emit (events.js:129:20)
34 verbose stack     at _stream_readable.js:908:16
34 verbose stack     at process._tickCallback (node.js:355:11)
35 verbose statusCode 403
36 verbose pkgid statsd-newrelic-backend
37 verbose cwd /Users/mauricio/Development/coders-clan/statsd-newrelic-backend
38 error Darwin 14.4.0
39 error argv "node" "/usr/local/bin/npm" "publish"
40 error node v0.12.1
41 error npm  v2.5.1
42 error code E403
43 error "You cannot publish over the previously published version 1.2.1." : statsd-newrelic-backend
44 error If you need help, you may report this error at:
44 error     <http://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
